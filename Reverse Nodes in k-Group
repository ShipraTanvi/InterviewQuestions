Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.
Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

Constraints:
The number of nodes in the list is n.
1 <= k <= n <= 5000
0 <= Node.val <= 1000

#Solution in Python
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def reverseKGroup(self, head, k):
        dummy = ListNode(0)
        dummy.next = head
        prev = dummy
        count = 0

        while head:
            count += 1
            if count % k == 0:
                prev = self.reverse(prev, head.next)
                head = prev.next
            else:
                head = head.next

        return dummy.next

    def reverse(self, prev, next):
        last = prev.next
        curr = last.next

        while curr != next:
            last.next = curr.next
            curr.next = prev.next
            prev.next = curr
            curr = last.next

        return last
